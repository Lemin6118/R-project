library(httr)
myKey <- Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
res <- GET(url = URL,
query = list(LAWD_CD = '11110',
DEAL_NO = '201512',
serviceKey = myKey %>% I() ))
res <- GET(url = URL,
query = list(LAWD_CD = '11110',
DEAL_NO = '201512',
serviceKey = myKey %>% I() ))
myKey <- Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
res <- get(url = URL,
query = list(LAWD_CD = '11110',
DEAL_NO = '201512',
serviceKey = myKey %>% I() ))
res <- get(url = URL,
query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
res <- get(url = URL,
query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey ))
res <- get(url = URL,
query = list(LAWD_CD = '11110',
DEAL_NO = '201512',
serviceKey = myKey %>% I() ))
res <- get(url = URL, query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
URL
myKey
myKey
myKey <- Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
myKey
Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
myKey <- 'D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D'
res <- get(url = URL, query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
myKey
myKey <- Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
library(tidyverse)
instal
install.packages("tidyverse")
install.packages("httr")
install.packages("rvest")
install.packages("jsonlite")
library(tidyverse)
library(httr)
library(rvest)
library(rvest)
library(jsonlite)
library(jsonlite)
res <- get(url = URL, query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
myKey <- Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
res <- get(url = URL, query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
library(tidyverse)
library(rvest)
library(httr)
library(rvest)
library(tidyverse)
library(httr)
library(rvest)
library(jsonlite)
library(tidyverse)
library(httr)
library(rvest)
library(jsonlite)
library(tidyverse)
library(httr)
library(rvest)
library(jsonlite)
library(tidyverse)
library(httr)
library(rvest)
library(jsonlite)
myKey
myKey <- Sys.getenv('D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D')
URL <- 'http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
res <- get(url = URL, query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
res <- GET(url = URL, query = list(LAWD_CD = '11110',DEAL_NO = '201512',serviceKey = myKey %>% I() ))
print(x=res)
res %>%
content(as = 'text', encoding = 'UTF-8') %>%
fromJSON() ->json
str(object = json)
str(object = json)
install.packages("XML")
library(XML)
#api_url을 통해 웹에 접속하여 XML 파일 다운로드 및 파싱
#http://openapi.seoul.go.kr:8088/sample/xml/ListPublicReservationCulture/1/5/%EC%BD%98%EC%84%9C%ED%8A%B8
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
#api_url을 통해 웹에 접속하여 XML 파일 다운로드 및 파싱
#http://openapi.seoul.go.kr:8088/sample/xml/ListPublicReservationCulture/1/5/%EC%BD%98%EC%84%9C%ED%8A%B8
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
myKey <- 'D%2BzZ%2B%2BKS2q7h3dBQmQua7MUzCFuL%2FHRCKHy26%2FZHCLwgDj0SK0hX%2FOMoK3kIEyzw4lp%2FQLsK%2FWktchm9THQi%2BA%3D%3D'
#api_url을 통해 웹에 접속하여 XML 파일 다운로드 및 파싱
#http://openapi.seoul.go.kr:8088/sample/xml/ListPublicReservationCulture/1/5/%EC%BD%98%EC%84%9C%ED%8A%B8
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
parsedXml <-xmlParse(api_url)
url = URL
> auth_key = myKey
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, type, LAWD_CD, DEAL_YMD, auth_key)
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, LAWD_CD, DEAL_YMD, auth_key)
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, LAWD_CD, DEAL_YMD, auth_key)
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, 'LAWD_CD=11110'', 'DEAL_YMD=201512', auth_key)
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, 'LAWD_CD=11110', 'DEAL_YMD=201512', auth_key)
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
type = 'xml'
LAWD_CD = '11110'
DEAL_YMD = '201512'
api_url = paste(url, '?LAWD_CD=11110', 'DEAL_YMD=201512', auth_key)
parsedXml <-xmlParse(api_url)
url
parsedXml
library(XML)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey))
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
api_url
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey),sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey),sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey),sep = '/')
parsedXml <-xmlParse(api_url)
parsedXml
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, service, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
parsedXml
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, myKey, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
parsedXml
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"), type, myKey, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"), type, myKey, startindex, endindex, sep = '')
parsedXml <-xmlParse(api_url)
api_url
parsedXml
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, myKey, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
parsedXml
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, myKey, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
url = URL
auth_key = myKey
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, paste("?LAWD_CD=","11110"),paste("&DEAL_YMD=","201512"),paste("&serviceKey=",myKey), type, myKey, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
git
demo
install.packages("wordcloud")
library(wordcloud)
word <- c("인천광역시","강화군","옹진군")
wordcloud(word,frequency,colors =  "blue")
wordcloud(word,frequency,colors =  "blue")
frequency <- c(1000.500,30)
wordcloud(word,frequency,colors="blue")
wordcloud(word,frequency,colors="blue")
wordcloud(word,frequency,colors="blue")
frequency <- c(1000,500,30)
wordcloud(word,frequency,colors="blue")
wordcloud(word,frequency,colors="rainbow")
wordcloud(word,frequency,colors="rainbow")
wordcloud(word,frequency,colors=rainbow)
wordcloud(word,frequency,colors=rainbow(length(word)))
wordcloud(word,frequency,colors=rainbow(length(word)))
word <- c("인천광역시","서울시","금정동")
frequency <- c(1000,500,30)
wordcloud(word,frequency,colors=rainbow(length(word)))
source("~/GitHub/R-project/geo_coding.R", encoding = 'UTF-8')
library(rjson)
install.packages('rjson')
library(rjson)
# 3단계: 지오 코딩 결과 저장
juso_geocoding <- rbindlist(add_list)   # 리스트를 데이터프레임 변환
juso_geocoding$coord_x <- as.numeric(juso_geocoding$coord_x) # 좌표값 숫자형 변환
juso_geocoding$coord_y <- as.numeric(juso_geocoding$coord_y)
juso_geocoding <- na.omit(juso_geocoding)   # 결측치 제거
dir.create("./05_geocoding")   # 새로운 폴더 생성
save(juso_geocoding, file="./05_geocoding/05_juso_geocoding.rdata") # 저장
write.csv(juso_geocoding, "./05_geocoding/05_juso_geocoding.csv")
install.packages('sf')
#---# [1단계: 지오데이터프레임 생성]
install.packages('sp')
install.packages('sf')
#---# [2단계: 주소 + 좌표 결합]
install.packages('dplyr')
source("~/GitHub/R-project/geo_dataframe.R", encoding = 'UTF-8')
#---# [2단계: 지오데이터프레임 시각화]
install.packages('leaflet')
source("~/GitHub/R-project/geo_dataframe.R", encoding = 'UTF-8')
source("~/GitHub/R-project/geo_dataframe.R", encoding = 'UTF-8')
source("~/GitHub/R-project/geo_dataframe.R", encoding = 'UTF-8')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./04_preprocess/04_preprocess.rdata")    # 주소 불러오기
load("./05_geocoding/05_juso_geocoding.rdata") # 좌표 불러오기
#---# [2단계: 주소 + 좌표 결합]
library(dplyr)   # install.packages('dplyr')
apt_price <- left_join(apt_price, juso_geocoding,
by = c("juso_jibun" = "apt_juso")) # 결합
apt_price <- na.omit(apt_price)   # 결측치 제거
#---# [1단계: 지오데이터프레임 생성]
library(sp)    # install.packages('sp')
coordinates(apt_price) <- ~coord_x + coord_y    # 좌표값 할당
proj4string(apt_price) <- "+proj=longlat +datum=WGS84 +no_defs" # 좌표계(CRS) 정의
library(sf)    # install.packages('sf')
apt_price <- st_as_sf(apt_price)     # sp형 => sf형 변환
#---# [2단계: 지오데이터프레임 시각화]
plot(apt_price$geometry, axes = T, pch = 1)        # 플롯 그리기
library(leaflet)   # install.packages('leaflet')   # 지도 그리기
leaflet() %>%
addTiles() %>%
addCircleMarkers(data=apt_price[1:1000,], label=~apt_nm) # 일부분(1000개)만 그리기
dir.create("06_geodataframe")   # 새로운 폴더 생성
save(apt_price, file="./06_geodataframe/06_apt_price.rdata") # rdata 저장
write.csv(apt_price, "./06_geodataframe/06_apt_price.csv")   # csv 저장
df <- structure(
list(longitude = c(128.6979, 153.0046, 104.3261, 124.9019,
126.7328, 153.2439, 142.8673, 152.689),
latitude = c(-7.4197, -4.7089, -6.7541, 4.7817,
2.1643, -5.65, 23.3882, -5.571)),
.Names = c("coord_x", "coord_y"), class = "data.frame", row.names = c(NA, -8L))
head(df)
library(sp)
coordinates(df) <- ~coord_x + coord_y   # 좌표값 할당(sp형)
proj4string(df) <- "+proj=longlat +datum=WGS84 +no_defs" # 좌표계(CRS) 정의(sp형)
library(sf)    # install.packages('sf')
df <- st_as_sf(df)     # sp형 => sf형 변환
head(df)
library(leaflet)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data=df)
#---# [1단계: 지오데이터프레임 생성]
library(sp)    # install.packages('sp')
coordinates(apt_price) <- ~coord_x + coord_y    # 좌표값 할당
proj4string(apt_price) <- "+proj=longlat +datum=WGS84 +no_defs" # 좌표계(CRS) 정의
library(sf)    # install.packages('sf')
apt_price <- st_as_sf(apt_price)     # sp형 => sf형 변환
#---# [2단계: 지오데이터프레임 시각화]
plot(apt_price$geometry, axes = T, pch = 1)        # 플롯 그리기
library(leaflet)   # install.packages('leaflet')   # 지도 그리기
leaflet() %>%
addTiles() %>%
addCircleMarkers(data=apt_price[1:1000,], label=~apt_nm) # 일부분(1000개)만 그리기
dir.create("06_geodataframe")   # 새로운 폴더 생성
#---# [1단계: 데이터 불러오기]
install.package("rlang", type='birnary')
#---# [1단계: 데이터 불러오기]
install.package("rlang", type='birnary')
#---# [1단계: 데이터 불러오기]
install.package("rlang")
#---# [1단계: 데이터 불러오기]
library("rlang")
#---# [1단계: 데이터 불러오기]
library("rlang");
#---# [1단계: 데이터 불러오기]
library("rlang")
#---# [1단계: 데이터 불러오기]
library("rlang")
#---# [1단계: 데이터 불러오기]
install.package("rlang", type='birnary')
#---# [1단계: 데이터 불러오기]
install.packages("rlang", type='birnary')
install.packages("rlang", type = "birnary")
source("~/GitHub/R-project/geo_dataframe.R", encoding = 'UTF-8')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./04_preprocess/04_preprocess.rdata")    # 주소 불러오기
load("./05_geocoding/05_juso_geocoding.rdata") # 좌표 불러오기
# install.packages('dplyr')
library(dplyr)
apt_price <- left_join(apt_price, juso_geocoding,
by = c("juso_jibun" = "apt_juso")) # 결합
apt_price <- na.omit(apt_price)   # NA 제거
library(sp)
coordinates(apt_price) <- ~coord_x + coord_y    # 좌표값 할당
proj4string(apt_price) <- "+proj=longlat +datum=WGS84 +no_defs" # 좌표계(CRS) 정의
library(sf)
apt_price <- st_as_sf(apt_price)     # sp형 => sf형 변환
plot(apt_price$geometry, axes = T, pch = 1)   # 플롯 그리기
library(leaflet)   # 지도 그리기
leaflet() %>%
addTiles() %>%
addCircleMarkers(data=apt_price[1:1000,], label=~apt_nm) # 일부분(1000개)만 그리기
dir.create("06_geodataframe")   # 새로운 폴더 생성
save(apt_price, file="./06_geodataframe/06_apt_price.rdata") # rdata 저장
write.csv(apt_price, "./06_geodataframe/06_apt_price.csv")   # csv 저장
